why were using GitHub
> for version control , and keep making new changes while not violating previous working code
.it is a vcs version controlling system


*what is clone
>download a copy of a repository

*what is add
>add a file to commit

*what is commit
>stage changes with a message


*what is push
>copy a commit to repository


*what is a merge conflicts
> ex: youre working in a team and dev a and dev b both were making new changes and dev one pushed a changes,and dev b then too tried to push the changes its gonna be a merge conflict

>>solution ether choose between which one is better or simply merge both of the code manually and then again push it



*what is a branch
>its a exact duplicate of main branches(master repo) code


*steps to create a repo in cmd

>git config --global user.name "Rahul Vinod Yadav"
>git config --global user.email "youremail@example.com"

>Create a Repo on GitHub (Website)

Go to GitHub → log in.

Click + (top-right) → New repository.

Name it (e.g., dataops_day1)

DO NOT check “Initialize with README” (we’ll push our local files instead).

Click Create repository.


If you already have a project folder:

>cd path/to/your/project {in your computer}
>git init
>git add .
>





If you want to create a fresh folder:

>mkdir dataops_day1
>cd dataops_day1
>git init
>touch README.md
>git add README.md
>git commit -m "Initial commit"




4️⃣ Link Local Repo to GitHub

From the GitHub page (after creating repo), copy the HTTPS link (looks like https://github.com/username/repo.git),
then run:

git remote add origin https://github.com/YOUR-USERNAME/dataops_day1.git
git branch -M main
git push -u origin main


usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--config-env=<name>=<envvar>] <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.






